sfDoctrineEditableComponent plugin
==================================

**WARNING:** This plugin is currently in an alpha state. Use with caution, feedback warmly welcome.

This plugin allows to set up edit-in-place, i18n-ready components (plain or html), typically to enable simple contents administration directly from the a frontend application. For achieving this goal, it uses some cool javascript libs like jQuery, facebox, CKEditor and the Doctrine ORM for persistence.

It's compatible with symfony 1.3 and 1.4.

Installation
------------

Using SVN:

    $ svn co http://svn.symfony-project.com/plugins/sfDoctrineEditableComponentPlugin/trunk plugins/sfDoctrineEditableComponentPlugin

Adds the `sfEditableComponentAdminFilter` filter in your application's `filter.yml` file:

    sfEditableComponentAdmin:
      class: sfEditableComponentAdminFilter

Then, you're ready to run the following tasks:

    $ php symfony cache:clear
    $ php symfony doctrine:build-all

Enable the plugin in your `ProjectConfiguration.class.php` file:

    [php]
    class ProjectConfiguration extends sfProjectConfiguration
    {
      public function setup()
      {
        $this->enablePlugins(array(
          'sfDoctrinePlugin',
          'sfDoctrineEditableComponentPlugin',
        ));
      }
    }

Publish the assets used by the plugin:

    $ php symfony plugin:publish-assets

**Note**: plugin helpers and modules will be enabled and loaded automatically.

Configuration
-------------

The plugin ships with a bunch of assets (javascripts and stylesheets) for the following libraries:

 - [jQuery](http://jquery.com/)
 - [Facebox](http://famspam.com/facebox)
 - [CKeditor](http://ckeditor.com/)

If your project already uses these libs, you can redefine the `sfDoctrineEditableComponentPlugin` section of your application `app.yml` file, in both the `javascripts` and `stylesheets` subcategories of the `assets` section, in order to remove the automatic inclusion of them:

    all:
      sfDoctrineEditableComponentPlugin:
        admin_credential: editable_content_admin
        assets:
          web_root:       /sfDoctrineEditableComponentPlugin
          javascripts:
            - /js/jquery-1.4.2.min.js #if your project already use jquery, remove this line
            - /ckeditor/ckeditor.js
            - /facebox/facebox.js
          stylesheets:
            - /facebox/facebox.css
        component_css_class_name:  sfEditableComponent
        default_content:          'Double-click to edit me'

Usage
-----

You can display editable components whithin any template, even if they don't exist yet in the database, this way:

    [php]
    <?php echo editable_component('content1')) ?>

Components become editable when the current user is authenticated and has the `editable_content_admin` credential (you can change this by editing the `app.yml` configuration, check the *Custom configuration* section below). 

Don't bother with components cache invalidation, it's already handled automatically on update. You can override the `cache.yml` of the `sfEditableComponent` module if you want to tweak its cache TTL though.

**Note:** The plugin doesn't provide any authentication nor credential persistence features. You can use the [sfDoctrineGuardPlugin](http://www.symfony-project.org/plugins/sfDoctrineGuardPlugin) plugin in order to easily obtain them.

Custom configuration
--------------------

You can configure the plugin in your `app.yml` file. You can look at the `app.yml` file bundled with the plugin, which contains all plugin's default values. 

Here are the main options available:

 - `admin_credential`: the name of the required credential for editing editable components
 - `component_css_class_name`: The name of the css classname to use for editable content divs
 - `default_content`: The default caption text for an empty component, in editing mode.

### License

This plugin is licensed under the terms of the [MIT license](http://en.wikipedia.org/wiki/MIT_License).

### About the author

This plugin has been created and is currently maintened by Nicolas Perriault (nperriault at gmail dot com).